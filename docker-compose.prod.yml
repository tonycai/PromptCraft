version: '3.8'

services:
  mysql_db_prod:
    image: mysql:8.0
    container_name: promptcraft_mysql_prod
    command: --default-authentication-plugin=caching_sha2_password
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD_PROD} # Must be set in prod env
      MYSQL_DATABASE: ${MYSQL_DATABASE_PROD:-promptcraft_db}
      MYSQL_USER: ${MYSQL_USER_PROD:-promptcraft_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD_PROD} # Must be set in prod env
    ports:
      # Consider not exposing MySQL port directly to the internet in production
      # If backend is in the same Docker network, it can connect internally
      # - "3306:3306"
    volumes:
      - mysql_data_prod:/var/lib/mysql # Named volume for production data
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-u$${MYSQL_USER_PROD}", "-p$${MYSQL_PASSWORD_PROD}"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 60s # Give more time for prod MySQL to initialize

  redis_cache_prod:
    image: redis:7-alpine
    container_name: promptcraft_redis_prod
    restart: always
    # For production, consider password protection for Redis
    # command: redis-server --requirepass ${REDIS_PASSWORD_PROD}
    ports:
      # Typically not exposed directly to internet if backend is in same network
      # - "6379:6379"
    volumes:
      - redis_data_prod:/data # Optional: for persistence, less critical for cache
    healthcheck:
      test: ["CMD", "redis-cli", "ping"] # Add -a ${REDIS_PASSWORD_PROD} if password is set
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  # db_init is typically not run as a separate, always-on service in prod.
  # Database schema migrations and initial seeding are often handled by:
  # 1. Entrypoint scripts in the backend service on first run.
  # 2. Dedicated migration tools/jobs run during deployment.
  # For this example, we assume initialization is handled as part of deployment or an entrypoint.

  backend:
    build:
      context: .
      dockerfile: api/Dockerfile
    container_name: promptcraft_backend_prod_mysql_redis
    restart: always
    volumes:
      - candidate_submissions_data:/app/candidate_submissions
      - evaluation_results_data:/app/evaluation_results
      # No direct DB file mounts for MySQL
    ports:
      - "8000:8000" 
    env_file:
      - .env.prod 
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      - MYSQL_HOST=mysql_db_prod # Connect to the prod MySQL service
      - MYSQL_USER=${MYSQL_USER_PROD} # From .env.prod
      - MYSQL_PASSWORD=${MYSQL_PASSWORD_PROD} # From .env.prod
      - MYSQL_DATABASE=${MYSQL_DATABASE_PROD} # From .env.prod
      - MYSQL_PORT=${MYSQL_PORT_PROD:-3306}
      - REDIS_HOST=redis_cache_prod # Connect to prod Redis service
      - REDIS_PORT=${REDIS_PORT_PROD:-6379}
      - LOG_LEVEL=${LOG_LEVEL_PROD:-INFO} # Added LOG_LEVEL for backend prod
      - MAILCHIMP_API_KEY=${MAILCHIMP_API_KEY_PROD}
      - MAILCHIMP_SERVER_PREFIX=${MAILCHIMP_SERVER_PREFIX_PROD:-us11}
      - SMTP_HOST=${SMTP_HOST_PROD:-smtp.mandrillapp.com}
      - SMTP_PORT=${SMTP_PORT_PROD:-587}
      - SMTP_USERNAME=${SMTP_USERNAME_PROD}
      - SMTP_PASSWORD=${SMTP_PASSWORD_PROD}
      - SMTP_USE_TLS=${SMTP_USE_TLS_PROD:-True}
      - FROM_EMAIL=${FROM_EMAIL_PROD:-noreply@promptcraft.aiw3.ai}
    depends_on:
      mysql_db_prod:
        condition: service_healthy
      redis_cache_prod: # Backend depends on prod Redis service
        condition: service_healthy
    healthcheck: # From Dockerfile
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"] # Changed to /health
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL_PROD:-http://localhost:8000/api/v1}
    container_name: promptcraft_frontend_prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL_PROD:-http://localhost:8000/api/v1}
    restart: always
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

volumes:
  mysql_data_prod: # Named volume for MySQL production data
  redis_data_prod: # Named volume for Redis prod data (optional)
  candidate_submissions_data:
  evaluation_results_data:
  # promptcraft_db_data: # This was for SQLite, replaced by mysql_data_prod for MySQL data
  # If you use named volumes for frontend node_modules/build in some scenarios, define them here
  # However, for Next.js standalone output, this is less common for the final image. 